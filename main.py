#!/usr/bin/env python3
# Shebang: permite executar este script diretamente no terminal (Linux/Mac),
# usando o interpretador python3 do sistema.

import argparse  # Biblioteca para criar e tratar argumentos de linha de comando
import os        # Biblioteca para manipula칞칚o de caminhos e arquivos
from datetime import datetime  # Para gerar timestamps (data/hora atuais)

# Importa fun칞칫es personalizadas do projeto
from loader import carregar_dados         # Fun칞칚o para ler e preparar os dados do CSV
from histogramas import gerar_histogramas # Fun칞칚o que gera gr치ficos de histograma
from dispersao import gerar_dispersoes    # Fun칞칚o que gera gr치ficos de dispers칚o
from pizza import gerar_pizzas            # Fun칞칚o que gera gr치ficos de pizza
from barra import gerar_barras             # Fun칞칚o que gera gr치ficos de barras
from services import ensure_dir            # Fun칞칚o auxiliar que garante a exist칡ncia de uma pasta

def main():
    # Cria o parser de argumentos para linha de comando
    ap = argparse.ArgumentParser(
        description="Gera TODOS os gr치ficos a partir de um CSV (p/ montar PDF)."
    )
    # Adiciona argumento obrigat칩rio --path (caminho para o CSV de entrada)
    ap.add_argument("--path", required=True, help="Caminho para o CSV.")
    # Adiciona argumento opcional --outdir (pasta de sa칤da dos gr치ficos)
    ap.add_argument("--outdir", default=None, help="Pasta de sa칤da (default: ./outputs/<timestamp>/)")
    
    # Faz o parsing dos argumentos passados pelo usu치rio no terminal
    args = ap.parse_args()

    # Salva o caminho do CSV em uma vari치vel
    csv_path = args.path
    # Verifica se o arquivo realmente existe
    if not os.path.exists(csv_path):
        # Encerra o programa com erro se n칚o existir
        raise SystemExit(f"Arquivo n칚o encontrado: {csv_path}")

    # Gera um timestamp no formato AAAAMMDD-HHMMSS para nomear a pasta de sa칤da
    ts = datetime.now().strftime("%Y%m%d-%H%M%S")
    # Se o usu치rio n칚o especificou a pasta de sa칤da, cria uma nova em ./outputs/<timestamp>
    outdir = args.outdir or os.path.join("outputs", ts)
    # Cria a pasta (se n칚o existir)
    ensure_dir(outdir)

    # Informa que vai ler o CSV
    print(f"[i] lendo CSV: {csv_path}")
    # Carrega e prepara os dados do CSV
    df = carregar_dados(csv_path)

    # Gera gr치ficos do tipo histograma
    print("[i] gerando histogramas...")
    gerar_histogramas(df, outdir)

    # Gera gr치ficos do tipo dispers칚o
    print("[i] gerando dispers칫es...")
    gerar_dispersoes(df, outdir)

    # Gera gr치ficos do tipo pizza
    print("[i] gerando pizzas...")
    gerar_pizzas(df, outdir)

    # Gera gr치ficos do tipo barras
    print("[i] gerando barras...")
    gerar_barras(df, outdir)

    # Mensagem final informando conclus칚o e pasta de sa칤da
    print("\nDone!")
    print(f"游늭arquivos salvos em: {os.path.abspath(outdir)}")

# Ponto de entrada: se o arquivo for executado diretamente, chama a fun칞칚o main()
if __name__ == "__main__":
    main()
